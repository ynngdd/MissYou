{
  "_args": [
    [
      {
        "raw": "react-lifecycles-compat@^1.0.2",
        "scope": null,
        "escapedName": "react-lifecycles-compat",
        "name": "react-lifecycles-compat",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/run/media/yanngodd/HDD/missyouu/node_modules/react-navigation"
    ]
  ],
  "_from": "react-lifecycles-compat@>=1.0.2 <2.0.0",
  "_id": "react-lifecycles-compat@1.0.2",
  "_inCache": true,
  "_location": "/react-lifecycles-compat",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-lifecycles-compat-1.0.2.tgz_1517422048656_0.40167925134301186"
  },
  "_npmUser": {
    "name": "brianvaughn",
    "email": "briandavidvaughn@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-lifecycles-compat@^1.0.2",
    "scope": null,
    "escapedName": "react-lifecycles-compat",
    "name": "react-lifecycles-compat",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-navigation"
  ],
  "_resolved": "https://registry.npmjs.org/react-lifecycles-compat/-/react-lifecycles-compat-1.0.2.tgz",
  "_shasum": "551d8b1d156346e5fcf30ffac9b32ce3f78b8850",
  "_shrinkwrap": null,
  "_spec": "react-lifecycles-compat@^1.0.2",
  "_where": "/run/media/yanngodd/HDD/missyouu/node_modules/react-navigation",
  "dependencies": {},
  "description": "Backwards compatibility polyfill for React class components",
  "devDependencies": {
    "chalk": "^2.3.0",
    "eslint": "^4.16.0",
    "eslint-config-es5": "^0.5.0",
    "jest": "^22.1.4",
    "jest-cli": "^22.1.4",
    "prettier": "^1.10.2",
    "webpack": "^2"
  },
  "devEngines": {
    "node": "8.5 || 9.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-uyYuXIt73odE9MQM9vFemhYI8AOiBr2TC0/Q8Dx0T27mLt20cRwauafXYul2l6hqSyoGsz4G+AepeFiyoEqVaQ==",
    "shasum": "551d8b1d156346e5fcf30ffac9b32ce3f78b8850",
    "tarball": "https://registry.npmjs.org/react-lifecycles-compat/-/react-lifecycles-compat-1.0.2.tgz"
  },
  "files": [
    "index.js",
    "react-lifecycles-compat.js",
    "react-lifecycles-compat.min.js"
  ],
  "gitHead": "78e214e4ff5d65f894b9783c76533a68833731e8",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "brianvaughn",
      "email": "briandavidvaughn@gmail.com"
    },
    {
      "name": "trueadm",
      "email": "dg@domgan.com"
    },
    {
      "name": "flarnie",
      "email": "flarnie.npm@gmail.com"
    },
    {
      "name": "sophiebits",
      "email": "npm@sophiebits.com"
    },
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "gaearon",
      "email": "dan.abramov@gmail.com"
    }
  ],
  "name": "react-lifecycles-compat",
  "optionalDependencies": {},
  "readme": "# react-lifecycles-compat\n\n## What is this project?\n\nReact version 17 will deprecate several of the class component API lifecycles: `componentWillMount`, `componentWillReceiveProps`, and `componentWillUpdate`. (See [React RFC 6](https://github.com/reactjs/rfcs/pull/6) for more information about this decision.)\n\nThis would typically require any third party libraries dependent on those lifecycles to release a new major version in order to adhere to semver. However, the `react-lifecycles-compat` polyfill offers a way to remain compatible with older versions of React (0.14.9+). ðŸŽ‰ðŸ˜Ž\n\n## How can I use the polyfill\n\nFirst, install the polyfill from NPM:\n```sh\n# Yarn\nyarn add react-lifecycles-compat\n\n# NPM\nnpm install react-lifecycles-compat --save\n```\n\nNext, update your component to use the new static lifecycle, `getDerivedStateFromProps`. For example:\n```js\n// Before\nclass ExampleComponent extends React.Component {\n  state = {\n    derivedData: computeDerivedState(this.props)\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.someValue !== nextProps.someValue) {\n      this.setState({\n        derivedData: computeDerivedState(nextProps)\n      });\n    }\n  }\n}\n\n// After\nclass ExampleComponent extends React.Component {\n  // Initialize state in constructor,\n  // Or with a property initializer.\n  state = {};\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.someMirroredValue !== nextProps.someValue) {\n      return {\n        derivedData: computeDerivedState(nextProps),\n        someMirroredValue: nextProps.someValue\n      };\n    }\n\n    // Return null to indicate no change to state.\n    return null;\n  }\n}\n```\n\nLastly, use the polyfill to make your component backwards compatible with older versions of React:\n```js\nimport React from 'react';\nimport polyfill from 'react-lifecycles-compat';\n\nclass ExampleComponent extends React.Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // ...\n  }\n\n  // ...\n}\n\n// Polyfill your component to work with older versions of React:\npolyfill(ExampleComponent);\n\nexport default ExampleComponent;\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "npm run build:dev && npm run build:prod",
    "build:dev": "NODE_ENV=development webpack",
    "build:prod": "NODE_ENV=production webpack",
    "install:dependencies": "node install.js",
    "lint": "eslint index.js",
    "prepublish": "npm test && npm run build",
    "prettier": "prettier --write {index,test}.js",
    "test": "jest test.js"
  },
  "version": "1.0.2"
}
